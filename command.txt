1. git init //初始化git仓库
2. git add <file> //可以多次使用git add命令，将文件添加到暂存区
3. git commit -m '描述提交的内容' //讲暂存区的文件添加到git仓库
4. git status //查看当前git的状态
5. git diff <file> //查看改文件修改了那些内容
6. git log //查看提交日志
   git log -p filename //可以显示该文件每次提交的diff
   git log -- filename （git log filename）//可以看到该文件相关的commit记录
7. git log --pretty=oneline //简化git log
8. git reset --hard HEAD^ //回到上一个版本
   git reset --hard HEAD^^ //回到上上个版本
   git reset --hard HEAD~100 //回到上100个版本
9. git reset --hard <commit id>//commit id不必写全可以写前五位
10. git reflog  //查看历史命令
11. git checkout -- <file> //撤回当前修改（删除），或者撤回git add后的修改（删除）
12. git reset HEAD <file> //把暂存区的修改撤销掉（unstage），重新放回工作区：
13. git rm <file> //删除一个文件 同git add命令功能一样
14. git remote add <remote-name> <url> //添加远程库
15. git push <远程主机名> <本地分支名>:<远程分支名> //将本地仓库推送到github
	git push <远程主机名> :<远程分支名> //如果省略本地分支名，则表示删除指定的远程分支，
										  因为这等同于推送一个空的本地分支到远程分支，
										  等同于 git push origin --delete master
	git push origin --delete <远程分支名> //删除远程分支
	git push --all origin //当遇到这种情况就是不管是否存在对应的远程分支，
							将本地的所有分支都推送到远程主机，这时需要 -all 选项
16. git clone <url> //克隆远程仓库
17. git branch <branch-name> //创建分支
18. git checkout -b <branch-name> //如果存在就切换此分支，不存在就创建分支并切换
	git checkout -b <branch-name> <commit-id> //以<commit-id>当前内容创建分支 并切换到此分支
19. git checkout <branch-name> //切换分支
20. git merge <branch-name> //指定分支合并到当前分支
21. git branch -d <branch-name> //删除指定分支
	git branch -a //查看所有分支列表，包括本地和远程
	git branch -vv //可以查看本地分支对应的远程分支
	git branch -m oldName newName //给分支重命名
22. git merge --no-ff -m "merge with no-ff" dev //表示合并时禁用Fast forward
23. git stash //可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
24. git stash apply //恢复被‘储藏’的工作
25. git stash drop //删除stash储藏的内容
26. git stash pop //恢复的同时把stash内容也删了
27. git checkout -b <branch-name> origin/<branch-name> //创建远程origin的<branch-name>分支到本地
28. git pull <远程主机名> <远程分支名>:<本地分支名>//从远程抓取分支并与本地分支合并
	git pull <远程主机名> <远程分支名> 	//远程分支是与当前分支合并，则冒号后面的部分可以省略。
	git pull <远程主机名> //如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。
	git pull //如果当前分支只有一个追踪分支，连远程主机名都可以省略。
29. git remote -v //查看远程库信息
30. git branch --set-upstream <branch-name> origin/<branch-name> //建立本地分支和远程分支的关联
33. git tag <tagname> //打标签
34. git rebase //变基
35. git tag <tagname> commit-id //为commit-id打标签
36. git show <tagname> //查看标签信息：
    git show commit-id //根据commit-id查看某个提交 
    git show commit-id filename //查看某次提交中的某个文件变化
37. git tag -a <tagname> -m "blablabla..." //可以指定标签信息；
38. git push origin <tagname> //可以推送一个本地标签；
39. git push origin --tags //可以推送全部未推送过的本地标签；
40. git tag -d <tagname> //可以删除一个本地标签；
41. git push origin :refs/tags/<tagname> //可以删除一个远程标签。
42. git push -u origin <remote_branch>或git push --set-upstream origin <remote_branch> //提交时配置关联关系
	注：默认配置下，提交时本地分支需和远程分支同名；
	git branch --set-upstream-to=<remote_branch> //更改git/config文件
	无论使用上述那种方法，本地分支和远程分支的“关联”最终都会写到config文件；
	关联分支：在git中表现为upstream,无论是使用push -u 或是 git branch --set-upstream-to方法，
	均会将这种对应关系写入.git/config配置文件，如果一个本地分支没有关联分支，则无法执行 git push 或 git pull指令；
43. git rebase --onto master server client //取出 client 分支，找出处于 client 分支和 server 分支的共同祖先之后的修改，
											 然后把它们在 master 分支上重放一遍
						  ↓master									   ↓master	   ↓client	
		c1 —— c2 —— c5 —— c6						c1 —— c2 —— c5 —— c6 ——	c8` —— c9`					
			   \ 			↓server						   \ 			↓server				
				c3 —— c4 —— c10				→ 			    c3 —— c4 —— c10							
				 \		↓client																
				  c8 —— c9														
